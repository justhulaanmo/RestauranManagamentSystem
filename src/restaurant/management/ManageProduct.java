package restaurant.management;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import structure.connectiontodatabase;

public class ManageProduct extends javax.swing.JFrame {

    
        private Connection con;
        Statement st;
        PreparedStatement pst;
        private int adminId;
        
    public ManageProduct() {
        int adminId = Login.adminId;
        initComponents();
        con = connectiontodatabase.getConnection(); //para magwork ung connection method mo call it like this
        setLocationRelativeTo(null);
        //jLabel5.requestFocus();
        loadTableData();
        
        selectcategory.setEnabled(false);
        savebtn.setEnabled(false);
        btnedit.setEnabled(false);
        btndelete.setEnabled(false);
        

    //*************************************************************************************************//
        
       jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
    @Override
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = jTable1.getSelectedRow(); // row index
        if (selectedRow >= 0) {

            String productName = jTable1.getValueAt(selectedRow, 1).toString();
            String sellingPrice = jTable1.getValueAt(selectedRow, 2).toString();
            String productPrice = jTable1.getValueAt(selectedRow, 4).toString();
            String productCategory = jTable1.getValueAt(selectedRow, 5).toString();

            txtProdname.setText(productName);
            txtSellingprice.setText(sellingPrice);
            txtProdprice.setText(productPrice);
            selectcategory.setSelectedItem(productCategory);
            
            txtProdname.setEditable(false);
            txtSellingprice.setEditable(false);
            txtProdprice.setEditable(false);
            selectcategory.setEnabled(false);

            btnedit.setEnabled(true);
            btndelete.setEnabled(true);
            savebtn.setEnabled(false);
        }
    }
});

    } 
        
    //*************************************************************************************************//
        private void loadTableData() {
            
        try {
        st = con.createStatement(); // Initialize the Statement object before use
        String query = "SELECT product_id, product_name, selling_price, quantity, product_price, category FROM products";
        ResultSet rs = st.executeQuery(query);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear the existing rows

        while (rs.next()) {
            Object[] row = {
                rs.getInt("product_id"),
                rs.getString("product_name"),
                rs.getDouble("selling_price"),
                rs.getInt("quantity"),
                rs.getDouble("product_price"),
                rs.getString("category"),
            };
            model.addRow(row);
        }
        } catch (Exception e) {
        e.printStackTrace();
    }
}
    //*************************************************************************************************//
        
        private void filterTableByCategory(String category) {
      
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);
    
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + category));
        
    //*************************************************************************************************//
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProdname = new javax.swing.JTextField();
        txtSellingprice = new javax.swing.JTextField();
        savebtn = new javax.swing.JButton();
        jlabel7 = new javax.swing.JLabel();
        txtProdprice = new javax.swing.JTextField();
        btndelete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        selectCombo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        add = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        selectcategory = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 675));

        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 675));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        back.setBackground(new java.awt.Color(231, 230, 221));
        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, -1, -1));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setText("Product Name:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 96, -1));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText("Selling Price ($):");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 100, -1));

        txtProdname.setEditable(false);
        jPanel1.add(txtProdname, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 230, -1));

        txtSellingprice.setEditable(false);
        txtSellingprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSellingpriceActionPerformed(evt);
            }
        });
        jPanel1.add(txtSellingprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 230, -1));

        savebtn.setBackground(new java.awt.Color(231, 230, 221));
        savebtn.setText("Save");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });
        jPanel1.add(savebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 130, -1, -1));

        jlabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel7.setText("Product Price:");
        jPanel1.add(jlabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 100, -1));

        txtProdprice.setEditable(false);
        txtProdprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProdpriceActionPerformed(evt);
            }
        });
        jPanel1.add(txtProdprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, 230, -1));

        btndelete.setBackground(new java.awt.Color(231, 230, 221));
        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btndelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 160, -1, -1));

        jLabel3.setText("Product Category:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 270, -1, -1));

        btnSearch.setBackground(new java.awt.Color(231, 230, 221));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 270, -1, -1));

        selectCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Combo", "Dessert" }));
        jPanel1.add(selectCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, 115, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Selling Price", "Quantity", "Original Price", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 830, 320));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 850, 360));

        add.setBackground(new java.awt.Color(231, 230, 221));
        add.setText("Add Product");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jPanel1.add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 190, -1, -1));

        btnedit.setBackground(new java.awt.Color(231, 230, 221));
        btnedit.setText("Edit");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });
        jPanel1.add(btnedit, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 100, -1, -1));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel6.setText("Category:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 190, 90, -1));

        selectcategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category", "Combo", "Dessert" }));
        jPanel1.add(selectcategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, 130, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/normalbackground.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
  
        this.dispose();
        AdminHome home = new AdminHome();
        home.setVisible(true);
        
    }//GEN-LAST:event_backActionPerformed

    private void txtSellingpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSellingpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSellingpriceActionPerformed

    private void txtProdpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProdpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProdpriceActionPerformed

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
                                          
    int selectedRow = jTable1.getSelectedRow();

    // Fetch input values
    String productName = txtProdname.getText().trim();
    String category = selectcategory.getSelectedItem().toString(); // Selected category
    String sellingPrice = txtSellingprice.getText().trim();
    String productPrice = txtProdprice.getText().trim();

    // Validate input fields
    if (productName.isEmpty() || sellingPrice.isEmpty() || productPrice.isEmpty() || "Select Category".equals(category)) {
        JOptionPane.showMessageDialog(this, "All fields must be filled!", "ERROR", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Convert price fields to doubles
        double sellingPriceDouble = Double.parseDouble(sellingPrice);
        double productPriceDouble = Double.parseDouble(productPrice);

        if (selectedRow == -1) {
            // Insert new product if no row is selected
            String insertQuery = "INSERT INTO products (product_name, category, selling_price, product_price) VALUES (?, ?, ?, ?)";
            pst = con.prepareStatement(insertQuery);

            // Set values
            pst.setString(1, productName);
            pst.setString(2, category);
            pst.setDouble(3, sellingPriceDouble);
            pst.setDouble(4, productPriceDouble);

            // Execute insertion
            pst.executeUpdate();
            jTable1.clearSelection();
            JOptionPane.showMessageDialog(this, "Product Added Successfully!");
        } else {
            // Update existing product if a row is selected
            int productId = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString());

            String updateQuery = "UPDATE products SET product_name=?, category=?, selling_price=?, product_price=? WHERE product_id=?";
            pst = con.prepareStatement(updateQuery);

            // Set values
            pst.setString(1, productName);
            pst.setString(2, category);
            pst.setDouble(3, sellingPriceDouble);
            pst.setDouble(4, productPriceDouble);
            pst.setInt(5, productId);

            // Execute update
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Product Updated Successfully!");
        }

        // Reload table data
        loadTableData();

        // Reset fields and disable save button
        txtProdname.setText("");
        txtSellingprice.setText("");
        txtProdprice.setText("");
        selectcategory.setSelectedItem("Select Category");
        txtProdname.setEditable(false);
        txtSellingprice.setEditable(false);
        txtProdprice.setEditable(false);
        selectcategory.setEnabled(false);
        btndelete.setEnabled(true);
        savebtn.setEnabled(false);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numeric values for price!", "ERROR", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while saving the product. Please try again.", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    //**************************************************************************************************************************************//
    }//GEN-LAST:event_savebtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
    //**************************************************************************************************************************************//
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) { // Ensure a row is selected
        try {
            
            String query = "DELETE FROM products WHERE product_id=?";
            PreparedStatement st = con.prepareStatement(query);
            
            st.setInt(1, Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString())); // product_id

            st.executeUpdate();
            JOptionPane.showMessageDialog(this, "Product Deleted Successfully!");
            
        txtProdname.setText("");
        txtSellingprice.setText("");
        txtProdprice.setText("");
        selectcategory.setSelectedItem("Select Category");
        txtProdname.setEditable(false);
        txtSellingprice.setEditable(false);
        txtProdprice.setEditable(false);
        selectcategory.setEnabled(false);
        savebtn.setEnabled(false);

            loadTableData();
        } catch (Exception e) {
            e.printStackTrace();
        }
        } 
  
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        String selectedCategory = (String) selectCombo.getSelectedItem();

    if ("All".equalsIgnoreCase(selectedCategory)) {
       
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);
        sorter.setRowFilter(null);
        
    } else if (selectedCategory != null && !selectedCategory.isEmpty()) {
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + selectedCategory));
    } else {
        JOptionPane.showMessageDialog(this, "Please select a valid category!", "Warning", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
    
    txtProdname.setText("");
    txtSellingprice.setText("");
    txtProdprice.setText("");
    selectcategory.setSelectedItem("Select Category");    
        
    txtProdname.setEditable(true);
    txtSellingprice.setEditable(true);
    txtProdprice.setEditable(true);
    selectcategory.setEnabled(true);

    savebtn.setEnabled(true);
    btnedit.setEnabled(false);
    btndelete.setEnabled(false);
    jTable1.clearSelection();
        
    String productName = txtProdname.getText().trim();
    String sellingPrice = txtSellingprice.getText().trim();
    String productPrice = txtProdprice.getText().trim();
    String category = selectcategory.getSelectedItem().toString();

    // Validate the input fields
    if (productName.isEmpty() || sellingPrice.isEmpty() || productPrice.isEmpty() || "Select Category".equals(selectCombo.getSelectedItem())) {
        //JOptionPane.showMessageDialog(this, "All fields must be filled!", "ERROR", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convert prices to doubles
    double sellingPriceDouble;
    double productPriceDouble;
    try {
        sellingPriceDouble = Double.parseDouble(sellingPrice);
        productPriceDouble = Double.parseDouble(productPrice);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numeric values for price!", "ERROR", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Insert the product into the database
    try {
        String query = "INSERT INTO products (product_name, selling_price, product_price, category) VALUES (?, ?, ?, ?)";
        pst = con.prepareStatement(query);
        
        // Set the values for the prepared statement
        pst.setString(1, productName);
        pst.setDouble(2, sellingPriceDouble);
        pst.setDouble(3, productPriceDouble);
        pst.setString(4, category);
        
        // Execute the insertion
        pst.executeUpdate();
        
        // Show success message
        JOptionPane.showMessageDialog(this, "Product Added Successfully!");
        
        // Reload the table data
        loadTableData();
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while adding the product. Please try again.", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    
    }//GEN-LAST:event_addActionPerformed

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
       
    txtProdname.setEditable(true);
    txtSellingprice.setEditable(true);
    txtProdprice.setEditable(true);
    selectcategory.setEnabled(true);

    savebtn.setEnabled(true);
    btnedit.setEnabled(false);
    
    }//GEN-LAST:event_btneditActionPerformed
    
    //**************************************************************************************************************************************//
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton back;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnedit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jlabel7;
    private javax.swing.JButton savebtn;
    private javax.swing.JComboBox<String> selectCombo;
    private javax.swing.JComboBox<String> selectcategory;
    private javax.swing.JTextField txtProdname;
    private javax.swing.JTextField txtProdprice;
    private javax.swing.JTextField txtSellingprice;
    // End of variables declaration//GEN-END:variables
}
